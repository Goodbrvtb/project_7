import React from "react";
import HomeTitle from "../../homeTitle";
import "./style.css";

function ReactMemo() {
  return (
    <HomeTitle
      title={
        <section className="content-block">
          <div className="text-block">
            <h2 className="content-title">React.memo</h2>

            <p>
              <b>React.memo</b> — это функция высшего порядка (Higher Order
              Component) в библиотеке React, которая оптимизирует
              производительность функциональных компонентов. Она предназначена
              для предотвращения ненужного повторного рендеринга компонента,
              когда его пропсы и состояние не изменились.
            </p>
            <p>
              По умолчанию, при каждом изменении состояния или пропсов компонент
              перерисовывается, даже если результирующий визуальный вывод не
              изменился. Это может быть неэффективно для компонентов, которые не
              зависят от изменений внешних данных и всегда отображают одинаковый
              результат.
            </p>
            <p>
              React.memo использует механизм мемоизации, чтобы запоминать
              предыдущий результат рендеринга компонента и сравнивать его с
              текущими пропсами. Если пропсы не изменились, React.memo
              предотвращает повторный рендеринг компонента, возвращая
              сохраненный результат.
            </p>
            <h2>Пример использования </h2>
          </div>
          <div className="code-block">
            <pre>
              <code>
                {`import React from 'react';

const MyComponent = React.memo((props) => {
  // Компонент будет перерисовываться только при изменении пропсов
  return (
    <div>
      {props.text}
    </div>
  );
});`}
              </code>
            </pre>
          </div>
          <div className="text-block">
            <p>
              React.memo также принимает второй необязательный аргумент в виде
              функции сравнения (compareFunction), которая позволяет
              контролировать, какие пропсы должны считаться "равными". Если
              функция сравнения не указана, React.memo будет использовать
              поверхностное сравнение (shallow comparison) для сравнения
              пропсов.
            </p>
          </div>
          <div className="code-block">
            <pre>
              <code>
                {`import React from 'react';

const MyComponent = React.memo((props) => {
  // Компонент будет перерисовываться только при изменении пропсов с помощью 
  // compareFunction
  return (
    <div>
      {props.text}
    </div>
  );
}, (prevProps, nextProps) => {
  // compareFunction - пользовательская функция сравнения пропсов
  // Возвращает true, если пропсы должны считаться равными и компонент не должен перерисовываться
});`}
              </code>
            </pre>
          </div>
          <div className="text-block">
            <p>
              Использование React.memo позволяет сократить количество повторных
              рендеров и улучшить производительность приложения, особенно для
              компонентов c большим количеством данных или сложными вычислениями
              внутри.
            </p>
          </div>
        </section>
      }
    />
  );
}

export default ReactMemo;
